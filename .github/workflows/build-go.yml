# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build & Tests

# on:
#   push:
#     tags:
#       - "v*"
on:
  push:
    paths-ignore:
      - 'README.md'
    branches:
      - main
      - feature/*
      - bugfix/*
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64 # Windows ARM64 is not supported by Go
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup GoLang
      uses: actions/setup-go@v5
      with:
        go-version: '~1.23.4'

    # - name: Run vet & lint
    #   run: |
    #     go install golang.org/x/lint/golint@latest
    #     go vet cmd
    #     golint cmd
    # - uses: actions/setup-python@v5
    # - uses: pre-commit/action@v3.0.1

    - name: Bump version and push tag
      if: github.ref == 'refs/heads/main'
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.2
      with:
        dry_run: true
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get Version from Tag
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Build
      id: build
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        set -x
        go version

        export CGO_ENABLED=0

        OUTPUT_NAME=tpl-${{ matrix.os }}-${{ matrix.arch }}
        if [ "${{ matrix.os }}" == "windows" ]; then
          OUTPUT_NAME+=".exe"
        fi
        if [ "${{ matrix.os }}" == "darwin" ]; then
          OUTPUT_NAME=tpl-macos-${{ matrix.arch }}
        fi
        go build \
          -ldflags="-X main.BuildVersion=${{ steps.tag_version.outputs.new_tag }}" \
          -o bin/$OUTPUT_NAME \
          ./tpl.go

        echo "binary=${OUTPUT_NAME}" >> "$GITHUB_OUTPUT"

    - name: Run UPX
      uses: crazy-max/ghaction-upx@v3
      # macos is not supported
      if: ${{ matrix.os != 'darwin' }}
      with:
        version: latest
        files: |
          ./bin/*
        args: -fq

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build.outputs.binary }}
        path: bin/*

  test:
    name: test on ${{ matrix.os }}
    needs:
      - build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            binary: tpl-linux-amd64

          - os: macos-latest
            binary: tpl-macos-amd64

          - os: windows-latest
            binary: tpl-windows-amd64.exe
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.binary }}
          path: .

      - name: Get Version from Tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Run test on Linux/MacOS
        if: matrix.os != 'windows-latest'
        run: |
          chmod +x ${{ matrix.binary }}
          ./${{ matrix.binary }} -v

          export foo="bar"
          export bar="[foo,bar]"
          export foobar="{foo:bar,bar:foo}"
          export foobaz="{foo:[bar,baz]}"
          export baz="1.0-123"
          export number="59614658972"
          export null="null"
          export empty=
          export money="500€"
          export special="?&>=:/"
          export woot="[]"
          export whoa="{}"
          export backslash="\.\/"
          export urls="{google:[https:://google.com,http:://google.de],github:https:://github.com}"
          export json='{"abc":123,"def":["a","b","c"],"ghi":"[{,!?!,}]"}'

          echo
          echo

          ./${{ matrix.binary }} -t test.tpl | diff -y test.txt - && echo Tests succeeded! || echo Tests failed!

          echo
          echo

          ./${{ matrix.binary }} -t test.tpl -o test.out && diff -y test.txt test.out && echo Tests succeeded! || echo Tests failed!


      - name: Run test on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          .\\${{ matrix.binary }} -v

          # FIXME: doesn't work now but I don't care that much about this platform
          # # Set environment variables
          # $env:foo = "bar"
          # $env:bar = "[foo,bar]"
          # $env:foobar = "{foo:bar,bar:foo}"
          # $env:foobaz = "{foo:[bar,baz]}"
          # $env:baz = "1.0-123"
          # $env:number = "59614658972"
          # $env:null = "null"
          # $env:empty = ""
          # $env:money = "500€"
          # $env:special = "?&>=:/"
          # $env:woot = "[]"
          # $env:whoa = "{}"
          # $env:backslash = "\.\/"
          # $env:urls = "{google:[https:://google.com,http:://google.de],github:https:://github.com}"
          # $env:json = '{"abc":123,"def":["a","b","c"],"ghi":"[{,!?!,}]"}'

          # Write-Host "`n`n"

          # # Run the first test and compare output with test.txt
          # .\\${{ matrix.binary }} -t test.tpl | Out-File -FilePath test_temp_1.out -Encoding utf8
          # $comparison1 = Compare-Object (Get-Content -Path "test.txt") (Get-Content -Path "test_temp_1.out")
          # if ($comparison1) {
          #   Write-Host "❌ First test failed!" -ForegroundColor Red
          #   exit 1  # Fail the build
          # } else {
          #   Write-Host "✅ First test succeeded!" -ForegroundColor Green
          # }

          # Write-Host "`n`n"

          # # Run the second test with output redirection and compare files
          # .\\${{ matrix.binary }} -t test.tpl -o test.out
          # $comparison2 = Compare-Object (Get-Content -Path "test.txt") (Get-Content -Path "test.out")
          # if ($comparison2) {
          #   Write-Host "❌ Second test failed!" -ForegroundColor Red
          #   exit 1  # Fail the build
          # } else {
          #   Write-Host "✅ Second test succeeded!" -ForegroundColor Green
          # }

  release:
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - test
      - build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag on master
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v4
        with:
          # download all
          path: bin
          merge-multiple: true

      - name: Calculate checksums
        run: |
          cd bin
          sha512sum tpl-* > sha512sums.txt

      - name: Bump version and push tag
        if: github.ref == 'refs/heads/main'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create normal GitHub release
        if: github.ref == 'refs/heads/main' && github.event_name != 'schedule'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Upload multiple assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          for asset in bin/*; do
            gh release upload "${{ steps.tag_version.outputs.new_tag }}" "$asset"
          done
