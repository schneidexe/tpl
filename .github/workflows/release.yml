name: Build and release

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.19.1

      - name: Build
        run: |
          go version

          export GOBIN=$(go env GOPATH)/bin
          export PATH=$PATH:$GOBIN
          go get -v

          go install github.com/mitchellh/gox@latest
          gox \
            -arch=amd64 \
            -os="darwin linux windows" \
            -ldflags="-X 'main.BuildVersion=${GITHUB_REF##*/}'" \
            -output="dist/tpl-{{.OS}}-{{.Arch}}"
          gox \
            -arch=386 \
            -os="linux windows" \
            -ldflags="-X 'main.BuildVersion=${GITHUB_REF##*/}'" \
            -output="dist/tpl-{{.OS}}-{{.Arch}}"
          gox \
            -arch=arm64 \
            -os="linux darwin" \
            -ldflags="-X 'main.BuildVersion=${GITHUB_REF##*/}'" \
            -output="dist/tpl-{{.OS}}-{{.Arch}}"

      - name: Run vet & lint
        run: |
          go install golang.org/x/lint/golint@latest
          go vet .
          golint .

      - name: Test
        run: |
          sh test.sh

      - name: Test version string
        run: |
          go run -ldflags="-X 'main.BuildVersion=${GITHUB_REF##*/}'" tpl.go -v | grep "${GITHUB_REF##*/}"

      - name: Calculate checksums
        run: |
          cd dist
          sha512sum tpl-* > sha512sums.txt

      - uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs:
      - build
    # if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract version from tag on master
        run: echo "TPL_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: dist

      - name: Update README
        if: ${{ !contains(github.event.commits[0].message, 'auto-update README') }}
        run: |
          cp dist/tpl-linux-amd64 /usr/local/bin/tpl
          chmod +x /usr/local/bin/tpl

          export TPL_VERSION=${TPL_VERSION}
          echo ${TPL_VERSION}

          git checkout master
          tpl -t README.md.tpl | tee README.md

          if [[ "$(git status --porcelain)" != "" ]]; then
            git config user.name "GitHub Action"
            git config user.email "action@github.com"
            git add .
            git commit -m "docs(readme): auto-update README.md"
            git push
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload multiple assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          assets=()
          for asset in dist/*; do
            assets+=("-a" "$asset")
          done
          hub release edit "${assets[@]}" -m "" "${GITHUB_REF##*/}"
